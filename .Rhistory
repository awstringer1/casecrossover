smoothidx <- idx$smooth - object$modeldata$Nd
# Account for the manually removed one(s)
for (x in object$modeldata$vectorofcolumnstoremove) {
smoothidx[smoothidx >= x] <- smoothidx[smoothidx >= x] + 1
}
mn <- stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
sd = stitch_zero_vector(sqrt(object$posthoc$variance[smoothidx]),object$modeldata$vectorofcolumnstoremove)
summarytablerandom <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
# Create the proper rownames
covvalues <- purrr::reduce(idx$covvalues,c)
covvalues <- stitch_zero_vector(covvalues,object$modeldata$vectorofcolumnstoremove)
covnames <- names(idx$smooth)
for (nm in names(object$modeldata$vectorofcolumnstoremove)) {
covvalues[object$modeldata$vectorofcolumnstoremove[nm]] <- object$modeldata$control$linear_constraints[[nm]]$whichzero
covnames <- c(covnames[1:(object$modeldata$vectorofcolumnstoremove[nm]-1)],nm,covnames[(object$modeldata$vectorofcolumnstoremove[nm]):length(covnames)])
}
covnames
covvalues
rownames(summarytablerandom) <- stringr::str_c(covnames,covvalues)
summarytablerandom
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(simcc)
summary(simcc) -> summ
covs <- summ$summarytablerandom$covariate %>% unique()
cov
covs
x <- simcc
nm <- "exposure_binned"
x$modeldata$control$linear_constraints[[nm]]$u
x$modeldata$control$linear_constraints[[nm]]$u %>% length
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm)
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["vals"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]]))
vals <- x$modeldata$control$linear_constraints[[nm]]$u
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["vals"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]]))
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]]))
?geom_ribbon
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "grey",alpha = .3)
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
truefunc <- function(x) 3*(x^2 - .5^2)
truefunc(.5)
sort(unique(sim1data$exposure_binned))
smoothcontrol <- cc_control(
smooth_prior = list(pc_prior(3,.75)),
linear_constraints = create_linear_constraints(u = sim1data$exposure_binned,
whichzero = 0.5,
nm = "exposure_binned"))
simcc <- casecrossover::casecrossover(
case ~ s(exposure_binned) + strata(subject),
data = sim1data,
control = smoothcontrol,
verbose = TRUE
)
summary(simcc)
x <- simcc
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
plotlist$smooth <- list()
summ <- summary(x)
covs <- summ$summarytablerandom$covariate %>% unique()
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .5,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = .1,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .1,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = 1,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = .1,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = 1,linetype = "dashed") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = 1,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_line(ggplot2::aes(y = .data[["q2.5"]]),size = 1,linetype = "solid") +
ggplot2::geom_line(ggplot2::aes(y = .data[["q97.5"]]),size = 1,linetype = "dashed") +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm)
summ$summarytablerandom
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1)
plot.cc_fit <- function(x,...) {
idx <- get_indices(x$modeldata)
plotlist <- list()
if ("linear" %in% names(idx)) {
linearidx <- idx$linear - x$modeldata$Nd
plotlist$linear <- list()
for (nm in names(idx$linear)) {
mn <- x$posthoc$mean[linearidx[nm]]
sd <- sqrt(x$posthoc$variance[linearidx[nm]])
plt <- dplyr::tibble(x = c(mn - 3.5*sd,mn + 3.5*sd)) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::stat_function(fun = stats::dnorm,args = list(mean = mn,sd = sd)) +
ggplot2::labs(title = "",x = nm,y = "density") +
ggplot2::theme(text = ggplot2::element_text(size = 12))
plotlist$linear[[nm]] <- plt
}
}
if ("smooth" %in% names(idx)) {
plotlist$smooth <- list()
summ <- summary(x)
covs <- summ$summarytablerandom$covariate %>% unique()
for (nm in cov) {
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
plt <- summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1) +
labs(title = "",x = nm,y = "Posterior mean and 95% CI")
plotlist$smooth[[nm]] <- plt
}
}
structure(plotlist,class = c("cc_plot","list"))
}
plot(simcc)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
plot(simcc)
truefunc(0)
truefunc(1)
truefunc(.25)
devtools::test()
devtools::test()
summary(cc3)
plot(cc3)
object <- cc3
idx <- get_indices(object$modeldata)
call <- object$modeldata$model_elements$call
summarytablefixed <- summarytablerandom <- NULL
"linear" %in% names(idx)
"smooth" %in% names(idx)
smoothidx <- idx$smooth - object$modeldata$Nd
# Account for the manually removed one(s)
for (x in object$modeldata$vectorofcolumnstoremove) {
smoothidx[smoothidx >= x] <- smoothidx[smoothidx >= x] + 1
}
smoothidx
object$modeldata$vectorofcolumnstoremove
idx$smooth
idx$smooth - object$modeldata$Nd
mn <- stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
sd = stitch_zero_vector(sqrt(object$posthoc$variance[smoothidx]),object$modeldata$vectorofcolumnstoremove)
mn
sd
summarytablerandom <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablerandom
idx$covvalues
covvalues <- purrr::reduce(idx$covvalues,c)
covvalues <- stitch_zero_vector(covvalues,object$modeldata$vectorofcolumnstoremove)
covnames <- names(idx$smooth)
covnames
for (nm in names(object$modeldata$vectorofcolumnstoremove)) {
covvalues[object$modeldata$vectorofcolumnstoremove[nm]] <- object$modeldata$control$linear_constraints[[nm]]$whichzero
covnames <- c(covnames[1:(object$modeldata$vectorofcolumnstoremove[nm]-1)],nm,covnames[(object$modeldata$vectorofcolumnstoremove[nm]):length(covnames)])
}
covvalues
covnames
covvalues <- purrr::reduce(idx$covvalues,c)
covvalues <- stitch_zero_vector(covvalues,object$modeldata$vectorofcolumnstoremove)
covnames <- names(idx$smooth)
names(object$modeldata$vectorofcolumnstoremove))
names(object$modeldata$vectorofcolumnstoremove)
nm <- "x"
object$modeldata$control$linear_constraints[[nm]]$whichzero
covvalues[object$modeldata$vectorofcolumnstoremove[nm]] <- object$modeldata$control$linear_constraints[[nm]]$whichzero
object$modeldata$vectorofcolumnstoremove[nm]-1)
object$modeldata$vectorofcolumnstoremove[nm]-1
length(covnames)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(cc3)
devtools::test()
summary(cc4)
summary(cc5)
summary(cc6)
summary(cc7)
summary(cc8)
plot(cc7)
summary(cc13)
summary(cc11)
summary(cc10)
summary(cc9)
summary(cc8)
summary(cc9)
object <- cc9
idx <- get_indices(object$modeldata)
call <- object$modeldata$model_elements$call
summarytablefixed <- summarytablerandom <- NULL
idx
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
idx
summary(cc9)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(cc9)
summary(cc13)
summary(cc11)
summary(cc10)
devtools::test()
object <- cc11
idx <- get_indices(object$modeldata)
call <- object$modeldata$model_elements$call
summarytablefixed <- summarytablerandom <- NULL
linearidx <- idx$linear - object$modeldata$Nd
mn <- object$posthoc$mean[linearidx]
sd = sqrt(object$posthoc$variance[linearidx])
summarytablefixed <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablefixed$covariate <- colnames(object$modeldata$X)
summarytablefixed
smoothidx <- idx$smooth - object$modeldata$Nd
# Account for the manually removed one(s)
for (x in object$modeldata$vectorofcolumnstoremove) {
smoothidx[smoothidx >= x] <- smoothidx[smoothidx >= x] + 1
}
mn <- stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
sd = stitch_zero_vector(sqrt(object$posthoc$variance[smoothidx]),object$modeldata$vectorofcolumnstoremove)
summarytablerandom <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablerandom
smoothidx <- idx$smooth - object$modeldata$Nd
smoothidx
cc11$modeldata$model_elements
cc11$modeldata$control$linear_constraints
smoothidx <- idx$smooth - object$modeldata$Nd
# Account for the manually removed one(s)
for (x in object$modeldata$vectorofcolumnstoremove) {
smoothidx[smoothidx >= x] <- smoothidx[smoothidx >= x] + 1
}
smoothidx
object$posthoc$mean[smoothidx]
sqrt(object$posthoc$variance[smoothidx])
object$modeldata$vectorofcolumnstoremove
mn <- stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
sd = stitch_zero_vector(sqrt(object$posthoc$variance[smoothidx]),object$modeldata$vectorofcolumnstoremove)
mn
sd
object$posthoc$mean[smoothidx]
object$modeldata$vectorofcolumnstoremove
stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
?as
?sparseV
?sparseVector
x <- c(1,2,3,0,5)
as(x,"sparseVector")
sparseVector(x,1:5,5)
x <- x + 1e-16
as(x,"sparseVector")
as.numeric(as(x,"sparseVector"))
as.numeric(as(x,"sparseVector")) - 1e-16
sparseVector(x,1:5,5) -> xx
xx
x <- 1:5
x[4] <- 0
sparseVector(x,1:5,5) -> xx
xx
xx[4] <- 0
xx
str(xx)
xx@x <- x
xx
x
xx@i <- 1:5
xx
devtools::test()
summary(cc7)
object$posthoc$mean[smoothidx]
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/00-utils.R')
stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
object$modeldata$vectorofcolumnstoremove
x <- 1:5
length(as(x,"sparseVector"))
z <- object$modeldata$vectorofcolumnstoremove
x <- object$posthoc$mean[smoothidx]
if (any(z > length(x) + 1)) stop("You are asking for zeroes at positions not covered by x")
x <- as(x,"sparseVector")
x
x@i
x@i <- 1:length(x)
x
y <- as(x,"sparseVector")
# This drops zero values in x automatically- add them back in
y@i <- 1:length(x)
y@x <- x
x
x <- object$posthoc$mean[smoothidx]
x
y <- as(x,"sparseVector")
# This drops zero values in x automatically- add them back in
y@i <- 1:length(x)
y
y <- as(x,"sparseVector")
str(y)
1:length(x)
y@i <- 1:length(x)
y
y@x <- x
y
str(y)
devtools::test()
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/00-utils.R')
# INTERNAL: take a vector of values, a vector of indices, and return a vector
# containing the values of the first with zeroes spliced in at the indices
# specified by the second
stitch_zero_vector <- function(x,z) {
if (any(z > length(x) + 1)) stop("You are asking for zeroes at positions not covered by x")
y <- as(x,"sparseVector")
# This drops zero values in x automatically- add them back in
y@i <- 1:length(x)
y@x <- x
for (j in z) {
y@i[y@i >= j] <- y@i[y@i >= j] + 1
}
as.numeric(y)
}
object$posthoc$mean[smoothidx]
object$posthoc$mean[smoothidx]
stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
sink()
sink()
stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
devtools::test()
summary(cc9)
summary(cc10)
summary(cc11)
object <- cc11
idx <- get_indices(object$modeldata)
call <- object$modeldata$model_elements$call
summarytablefixed <- summarytablerandom <- NULL
if ("linear" %in% names(idx)) {
linearidx <- idx$linear - object$modeldata$Nd
mn <- object$posthoc$mean[linearidx]
sd = sqrt(object$posthoc$variance[linearidx])
summarytablefixed <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablefixed$covariate <- colnames(object$modeldata$X)
}
summarytablefixed
smoothidx <- idx$smooth - object$modeldata$Nd
# Account for the manually removed one(s)
for (x in object$modeldata$vectorofcolumnstoremove) {
smoothidx[smoothidx >= x] <- smoothidx[smoothidx >= x] + 1
}
smoothidx
mn <- stitch_zero_vector(object$posthoc$mean[smoothidx],object$modeldata$vectorofcolumnstoremove)
sd = stitch_zero_vector(sqrt(object$posthoc$variance[smoothidx]),object$modeldata$vectorofcolumnstoremove)
mn
sd
object$modeldata$vectorofcolumnstoremove
summarytablerandom <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablerandom
covvalues <- purrr::reduce(idx$covvalues,c)
covvalues <- stitch_zero_vector(covvalues,object$modeldata$vectorofcolumnstoremove)
covnames <- names(idx$smooth)
covvalues
names(object$modeldata$vectorofcolumnstoremove)
nm <- x
covvalues[object$modeldata$vectorofcolumnstoremove[nm]]
object$modeldata$vectorofcolumnstoremove[nm]
object$modeldata$vectorofcolumnstoremove
nm
nm <- "x"
covvalues[object$modeldata$vectorofcolumnstoremove[nm]]
object$modeldata$control$linear_constraints[[nm]]$whichzero
covvalues[object$modeldata$vectorofcolumnstoremove[nm]] <- object$modeldata$control$linear_constraints[[nm]]$whichzero
object$modeldata$vectorofcolumnstoremove[nm] == 1
covnames
covnames <- c(nm,covnames)
covnames
nm <= "x2"
nm <- "x2"
covvalues[object$modeldata$vectorofcolumnstoremove[nm]]
object$modeldata$control$linear_constraints[[nm]]$whichzero
object$modeldata$control$linear_constraints[["x"]]$whichzero
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(cc11)
summary(cc13)
devtools::test()
devtools::check()
devtools::check()
cc_control()
cc_control
cc_control(thetaaccuracy = 30)
smoothcontrol <- cc_control(
smooth_prior = list(pc_prior(3,.75)),
linear_constraints = create_linear_constraints(u = sim1data$exposure_binned,
whichzero = 0.5,
nm = "exposure_binned"),
thetaaccuracy = 50)
smoothcontrol
devtools::install_github("awstringer1/casecrossover")
