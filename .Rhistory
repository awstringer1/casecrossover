nodesfull <- nodesfull[order(nodesfull[ ,j]), ]
nodesfull
colnames(nodesfull)
colnames(nodesfull) <- c(paste0("theta",1:S),"thetalogpost")
nodesfull
nodesfull[ ,"theta1"]
thetavalues <- numeric(length(unique(nodesfull[ ,j])))
thetavalues
thetavalues <- sort(unique(nodesfull[ ,j]))
thetavalues
nodesmulti
nodesmulti
nodesmulti <- mvQuad::getNodes(thetagridreduced)
nodesmulti <- cbind(nodesmulti,mvQuad::getWeights(thetagridreduced))
nodesmulti
colnames(nodesmulti) <- c(paste0("theta",(1:S)[-j]),"weights")
nodesmulti
dplyr::left_join(nodesfull,nodesmulti)
dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti))
dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
group_by(.data[[stringr::str_c("theta",j)]])
dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
thetamargposts <- dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
thetamargposts
suppressMessages({
thetamargposts <- dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
})
thetamargposts <- dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
thetavalues <- sort(unique(nodesfull[ ,j]))
suppressMessages({# It prints what it's joining by, which is all columns, and I don't want to see this printed
thetamargposts <- dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
})
thetavalues
thetamargposts
marginal_hyperparameter_posterior <- function(j,ccfit) {
thetagridfull <- attr(ccfit$optimization,"thetagrid")
S <- thetagridfull$dim
# If it's already one-dimensional, don't need to do anything new
if (S == 1) {
return(ccfit$optimization$theta_logposterior)
}
# Get the reduced grid
thetagridreduced <- mvQuad::createNIGrid(
dim = thetagridfull$dim - 1,
type = thetagridfull$type[-j],
level = as.numeric(thetagridfull$level[ ,-j]),
ndConstruction = thetagridfull$ndConstruction,
level.trans = thetagridfull$level.trans
)
mvQuad::rescale(thetagridreduced,domain = thetagridfull$features$domain[-j, ])
# Return the marginal posterior and its evaluation points
# In the optimization results, we have a matrix of theta values which matches the full grid,
# and the log posterior evaluated at these values.
nodesfull <- purrr::reduce(ccfit$optimization$theta,rbind)
nodesfull <- cbind(nodesfull,ccfit$optimization$theta_logposterior) # Theta logposterior is now the last column
nodesfull <- nodesfull[order(nodesfull[ ,j]), ]
colnames(nodesfull) <- c(paste0("theta",1:S),"thetalogpost")
# Now we have a matrix of thetavalues, nodes, and function values-- add on the weights
nodesmulti <- mvQuad::getNodes(thetagridreduced)
nodesmulti <- cbind(nodesmulti,mvQuad::getWeights(thetagridreduced))
colnames(nodesmulti) <- c(paste0("theta",(1:S)[-j]),"weights")
suppressMessages({# It prints what it's joining by, which is all columns, and I don't want to see this printed
thetamargposts <- dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti)) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
})
thetamargposts$whichmarginal <- rep(j,nrow(thetamargposts))
thetamargposts
}
marginal_hyperparameter_posterior(1,simcc)
length(.Last.value)
tt <- mvQuad::createNIGrid(1,"GLe",50)
logSumExp(marginal_hyperparameter_posterior(1,simcc) + log(getWeights(tt)))
tt <- mvQuad::createNIGrid(1,"GLe",50)
rescale(tt,c(-1,1))
logSumExp(marginal_hyperparameter_posterior(1,simcc) + log(getWeights(tt)))
exp(.Last.value)
tt <- mvQuad::createNIGrid(1,"GLe",50)
rescale(tt,c(-10,10))
logSumExp(marginal_hyperparameter_posterior(1,simcc) + log(getWeights(tt)))
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/05-posthoc-quantities.R')
thetamargposts
nodesfull
dplyr::left_join(as.data.frame(nodesfull),as.data.frame(nodesmulti))
cbind(nodesfull,purrr::reduce(ccfit$optimization$sigma,rbind))
sigmanodes <- cbind(purrr::reduce(ccfit$optimization$theta,rbind),purrr::reduce(ccfit$optimization$sigma,rbind))
sigmanodes
sigmanodes <- cbind(sigmanodes,ccfit$optimization$sigma_logposterior)
sigmanodes
colnames(sigmanodes) <- c(paste0("theta",1:S),paste0("sigma",1:S),"sigmalogpost")
sigmanodes
# Return the marginal posterior and its evaluation points
# In the optimization results, we have a matrix of theta values which matches the full grid,
# and the log posterior evaluated at these values.
nodesfull <- purrr::reduce(ccfit$optimization$theta,rbind)
nodesfull <- cbind(nodesfull,ccfit$optimization$theta_logposterior) # Theta logposterior is now the last column
nodesfull <- nodesfull[order(nodesfull[ ,j]), ]
colnames(nodesfull) <- c(paste0("theta",1:S),"thetalogpost")
nodesfull <- as.data.frame(nodesfull)
# Now we have a matrix of thetavalues, nodes, and function values-- add on the weights
nodesmulti <- mvQuad::getNodes(thetagridreduced)
nodesmulti <- cbind(nodesmulti,mvQuad::getWeights(thetagridreduced))
colnames(nodesmulti) <- c(paste0("theta",(1:S)[-j]),"weights")
nodesmulti <- as.data.frame(nodesmulti)
nodesfull
nodesmulti
suppressMessages({# It prints what it's joining by, which is all columns, and I don't want to see this printed
thetamargposts <- dplyr::left_join(nodesfull,nodesmulti) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(logmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
})
thetamargposts
thetamargposts %>%
dplyr::mutate(sigma = exp(-.5 * .data[[paste0("theta",j)]]))
suppressMessages({# It prints what it's joining by, which is all columns, and I don't want to see this printed
thetamargposts <- dplyr::left_join(nodesfull,nodesmulti) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(thetalogmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
})
thetamargposts
thetamargposts %>%
dplyr::mutate(sigma = exp(-.5 * .data[[paste0("theta",j)]]),
sigmalogmargpost = (2/sigma) * thetalogmargpost
)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/05-posthoc-quantities.R')
marginal_hyperparameter_posterior(1,simcc)
thetamargposts
rename(thetamargposts,theta = theta1)
rename(thetamargposts,theta = .data[["theta1"]])
purrr::reduce(ccfit$optimization$theta,rbind)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/05-posthoc-quantities.R')
marginal_hyperparameter_posterior(1,ccfit)
marginal_hyperparameter_posterior(1,simcc)
object <- cc13
object
idx <- get_indices(object$modeldata,removezeros = FALSE)
call <- object$modeldata$model_elements$call
summarytablefixed <- summarytablerandom <- summarytablelincomb <- summarytablehyper <- NULL
idx
if ("linear" %in% names(idx)) {
linearidx <- idx$linear - object$modeldata$Nd
mn <- object$posthoc$mean[linearidx]
sd = sqrt(object$posthoc$variance[linearidx])
summarytablefixed <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablefixed$covariate <- colnames(object$modeldata$X)
}
summarytablefixed
if ("smooth" %in% names(idx)) {
# Random effect summary
smoothidx <- idx$smooth - object$modeldata$Nd
mn <- object$posthoc$mean[smoothidx]
sd <- sqrt(object$posthoc$variance[smoothidx])
summarytablerandom <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
# Create the proper rownames
covvalues <- purrr::reduce(idx$covvalues,c)
# covvalues <- stitch_zero_vector(covvalues,object$modeldata$vectorofcolumnstoremove)
covnames <- names(idx$smooth)
summarytablerandom$covariate <- covnames
summarytablerandom$covariate_value <- covvalues
# Hyperparameter summary
ww <- mvQuad::getWeights(attr(object$optimization,"thetagrid"))[ ,1]
thetamean <- apply(ww * purrr::reduce(object$optimization$theta,rbind) * exp(object$optimization$theta_logposterior),2,sum)
sigmamean <- apply(ww * purrr::reduce(object$optimization$sigma,rbind) * exp(object$optimization$sigma_logposterior),2,sum)
thetasd <- sqrt(apply(ww * (purrr::reduce(object$optimization$theta,rbind) - thetamean)^2 * exp(object$optimization$theta_logposterior),2,sum))
sigmasd <- sqrt(apply(ww * (purrr::reduce(object$optimization$sigma,rbind) - sigmamean)^2 * exp(object$optimization$sigma_logposterior),2,sum))
# # Quantiles... annoying.
# thetamargpostlist <- purrr::map(marginal_hyperparameter_posterior()
summarytablehyper <- data.frame(
covariate = rep(unique(names(idx$smooth)),2),
variable = rep(c("theta","sigma"),each = length(unique(names(idx$smooth)))),
mean = c(thetamean,sigmamean),
sd = c(thetasd,sigmasd)
) %>%
dplyr::arrange(.data[["covariate"]],.data[["variable"]])
}
summarytablehyper
smoothidx
length(unique(names(smoothidx)))
S <- length(unique(names(smoothidx)))
S
thetamargpostlist <- purrr::map(1:S,~marginal_hyperparameter_posterior(.x,object))
thetamargpostlist
thetamargpost <- purrr::map(1:S,~marginal_hyperparameter_posterior(.x,object)) %>%
purrr::reduce(dplyr::bind_rows)
thetamargpost
getWeights()
getWeights
j <_ 1
j <- 1
ccfit <- cc13
thetagridfull <- attr(ccfit$optimization,"thetagrid")
S <- thetagridfull$dim
# If it's already one-dimensional, don't need to do anything new
if (S == 1) {
thetamargposts <- dplyr::tibble(
theta = purrr::reduce(ccfit$optimization$theta,rbind),
thetalogmargpost = ccfit$optimization$theta_logposterior,
sigma = purrr::reduce(ccfit$optimization$sigma,rbind),
sigmalogmargpost = ccfit$optimization$sigma_logposterior
)
return(thetamargposts)
}
# Get the reduced grid
thetagridreduced <- mvQuad::createNIGrid(
dim = thetagridfull$dim - 1,
type = thetagridfull$type[-j],
level = as.numeric(thetagridfull$level[ ,-j]),
ndConstruction = thetagridfull$ndConstruction,
level.trans = thetagridfull$level.trans
)
mvQuad::rescale(thetagridreduced,domain = thetagridfull$features$domain[-j, ])
# Get a 1-d grid, for computing quantiles at the end.
thetagrid1d <- mvQuad::createNIGrid(
dim = 1,
type = thetagridfull$type[j],
level = as.numeric(thetagridfull$level[ ,j]),
ndConstruction = thetagridfull$ndConstruction,
level.trans = thetagridfull$level.trans
)
mvQuad::rescale(thetagrid1d,domain = thetagridfull$features$domain[j, ])
thetagrid1d
dplyr::left_join(nodesfull,nodesmulti)
suppressMessages({# It prints what it's joining by, which is all columns, and I don't want to see this printed
thetamargposts <- dplyr::left_join(nodesfull,nodesmulti) %>%
dplyr::group_by(.data[[stringr::str_c("theta",j)]]) %>%
dplyr::summarize(thetalogmargpost = matrixStats::logSumExp(thetalogpost + log(weights)))
})
thetamargposts$whichmarginal <- rep(j,nrow(thetamargposts))
# Now add on the sigmas
outmat <- thetamargposts %>%
dplyr::mutate(sigma = exp(-.5 * .data[[paste0("theta",j)]]),
sigmalogmargpost = (2/sigma) * thetalogmargpost
) %>%
dplyr::rename(theta = .data[[paste0("theta",j)]])
outmat
thetacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * exp(outmat$thetalogmargpost))
thetacumsum
quantiles = c(2.5,97.5)/100
quantiles
purrr::map(quantiles,~thetacumsum > .x)
thetacumsum[thetacumsum > .x]
purrr::map(quantiles,~thetacumsum[thetacumsum > .x])
purrr::map(quantiles,~min(thetacumsum[thetacumsum > .x]))
purrr::map(quantiles,~which(thetacumsum == min(thetacumsum[thetacumsum > .x])))
purrr::map(quantiles,~theta[which(thetacumsum == min(thetacumsum[thetacumsum > .x]))])
purrr::map(quantiles,~outmat$theta[which(thetacumsum == min(thetacumsum[thetacumsum > .x]))])
thetacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * exp(outmat$thetalogmargpost))
sigmacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * exp(outmat$sigmalogmargpost))
sigmacumsum
sigmacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * (2 / outmat$sigma) * exp(outmat$sigmalogmargpost))
sigmacumsum
# Now add on the sigmas
outmat <- thetamargposts %>%
dplyr::mutate(sigma = exp(-.5 * .data[[paste0("theta",j)]]),
sigmalogmargpost = log(2/sigma) + thetalogmargpost
) %>%
dplyr::rename(theta = .data[[paste0("theta",j)]])
outmat
sigmacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * (2 / outmat$sigma) * exp(outmat$sigmalogmargpost))
sigmacumsum
sigmacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * exp(outmat$sigmalogmargpost))
sigmacumsum
sigmacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * (sigma/2) * exp(outmat$sigmalogmargpost))
sigmacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * (outmat$sigma/2) * exp(outmat$sigmalogmargpost))
sigmacumsum
thetacumsum
sigmagrid1d <- mvQuad::createNIGrid(
dim = 1,
type = thetagridfull$type[j],
level = as.numeric(thetagridfull$level[ ,j]),
ndConstruction = thetagridfull$ndConstruction,
level.trans = thetagridfull$level.trans
)
mvQuad::rescale(sigmagrid1d,domain = exp(-5. * thetagridfull$features$domain[j, ]))
sigmagrid1d
sigmagrid1d <- mvQuad::createNIGrid(
dim = 1,
type = thetagridfull$type[j],
level = as.numeric(thetagridfull$level[ ,j]),
ndConstruction = thetagridfull$ndConstruction,
level.trans = thetagridfull$level.trans
)
mvQuad::rescale(sigmagrid1d,domain = rev(exp(-5. * thetagridfull$features$domain[j, ])))
getWeights(sigmagrid1d)
as.numeric(getWeights(sigmagrid1d)) * exp(outmat$sigmalogmargpost)
sigmagrid1d
thetacumsum <- cumsum(mvQuad::getWeights(thetagrid1d) * exp(outmat$thetalogmargpost))
thetaquantiles <- purrr::map(quantiles,~outmat$theta[which(thetacumsum == min(thetacumsum[thetacumsum > .x]))]) %>% purrr::reduce(c)
sigmaquantiles <- exp(-.5 * thetaquantiles)
thetaquantiles
sigmaquantiles
outmat
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/05-posthoc-quantities.R')
marginal_hyperparameter_posterior(cc13)
marginal_hyperparameter_posterior(1,cc13)
marginal_hyperparameter_posterior(1,cc13,c(1:100)/100)
object <- cc13
idx <- get_indices(object$modeldata,removezeros = FALSE)
call <- object$modeldata$model_elements$call
summarytablefixed <- summarytablerandom <- summarytablelincomb <- summarytablehyper <- NULL
if ("linear" %in% names(idx)) {
linearidx <- idx$linear - object$modeldata$Nd
mn <- object$posthoc$mean[linearidx]
sd = sqrt(object$posthoc$variance[linearidx])
summarytablefixed <- data.frame(
mean = mn,
sd = sd,
q2.5 = stats::qnorm(.025,mean = mn,sd = sd),
q97.5 = stats::qnorm(.975,mean = mn,sd = sd)
)
summarytablefixed$covariate <- colnames(object$modeldata$X)
}
# Hyperparameter summary
ww <- mvQuad::getWeights(attr(object$optimization,"thetagrid"))[ ,1]
thetamean <- apply(ww * purrr::reduce(object$optimization$theta,rbind) * exp(object$optimization$theta_logposterior),2,sum)
sigmamean <- apply(ww * purrr::reduce(object$optimization$sigma,rbind) * exp(object$optimization$sigma_logposterior),2,sum)
thetasd <- sqrt(apply(ww * (purrr::reduce(object$optimization$theta,rbind) - thetamean)^2 * exp(object$optimization$theta_logposterior),2,sum))
sigmasd <- sqrt(apply(ww * (purrr::reduce(object$optimization$sigma,rbind) - sigmamean)^2 * exp(object$optimization$sigma_logposterior),2,sum))
ww
thetamean
sigmamean
thetasd
sigmasd
S
# Quantiles based on the marginal posterior
S <- length(thetamean)
S
margpostsummarylist <- purrr::map(1:S,~marginal_hyperparameter_posterior(.x,object,c(2.5,97.5)/100))
margpostsummarylist
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/05-posthoc-quantities.R')
margpostsummarylist <- purrr::map(1:S,~marginal_hyperparameter_posterior(.x,object,c(2.5,97.5)/100))
margpostsummarylist
margpostsummarylist %>%
purrr::map("quantiles") %>%
purrr::reduce(bind_rows)
rep(unique(names(idx$smooth)),2)
rep(c("theta","sigma"),each = length(unique(names(idx$smooth))))
margquants <- margpostsummarylist %>%
purrr::map("quantiles") %>%
purrr::reduce(bind_rows)
margquants
margquants %>% filter(q = 0.025)
margquants %>% filter(q == 0.025)
margquants
margquants %>% filter(q == 1)
q
margquants %>% filter(.data[["q"]] == 1)
margquants %>% dplyr::filter(q == 1)
margquants %>% dplyr::filter(q == 0.025)
rep(c("theta","sigma"),each = length(unique(names(idx$smooth))))
q2.5theta <- dplyr::filter(margquants,q == 0.025) %>% pull(theta)
q97.5theta <- dplyr::filter(margquants,q == 0.975) %>% pull(theta)
q2.5sigma <- dplyr::filter(margquants,q == 0.025) %>% pull(sigma)
q97.5sigma <- dplyr::filter(margquants,q == 0.975) %>% pull(sigma)
margquants %>% dplyr::filter(q == 0.025) %>%
)
q97.5theta
q2.5theta
q2.5sigma
q97.5sigma
data.frame(
covariate = rep(unique(names(idx$smooth)),2),
variable = rep(c("theta","sigma"),each = length(unique(names(idx$smooth)))),
mean = c(thetamean,sigmamean),
sd = c(thetasd,sigmasd),
q2.5 = c(q2.5theta,q2.5sigma),
q97.5 = c(q97.5theta,q97.5sigma)
) %>%
dplyr::arrange(.data[["covariate"]],.data[["variable"]])
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(simcc)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(simcc)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
summary(simcc)
x <- cc13
idx <- get_indices(x$modeldata,removezeros = FALSE)
plotlist <- list()
summ <- summary(x)
if ("linear" %in% names(idx)) {
linearidx <- idx$linear - x$modeldata$Nd
plotlist$linear <- list()
for (nm in names(idx$linear)) {
mn <- x$posthoc$mean[linearidx[nm]]
sd <- sqrt(x$posthoc$variance[linearidx[nm]])
plt <- dplyr::tibble(x = c(mn - 3.5*sd,mn + 3.5*sd)) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::stat_function(fun = stats::dnorm,args = list(mean = mn,sd = sd)) +
ggplot2::labs(title = "",x = nm,y = "density") +
ggplot2::theme(text = ggplot2::element_text(size = 12))
plotlist$linear[[nm]] <- plt
}
}
summ$hypermarginals
# Plot the posterior covariate effects
plotlist$smooth <- list()
covs <- summ$summarytablerandom$covariate %>% unique()
for (nm in covs) {
vals <- sort(unique(x$modeldata$control$linear_constraints[[nm]]$u))
plt <- summ$summarytablerandom %>%
dplyr::filter(.data[["covariate"]] == nm) %>%
dplyr::mutate(x = vals) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["x"]])) +
ggplot2::theme_classic() +
ggplot2::geom_line(ggplot2::aes(y = .data[["mean"]])) +
ggplot2::geom_ribbon(ggplot2::aes(ymin = .data[["q2.5"]],ymax = .data[["q97.5"]]),colour = "lightgrey",alpha = .1) +
ggplot2::labs(title = "",x = nm,y = "Posterior mean and 95% CI") +
ggplot2::theme(text = ggplot2::element_text(size = 12))
plotlist$smooth[[nm]] <- plt
}
summ$hypermarginals
covs
nm <- x
which(covs == nm)
nm <- "x"
which(covs == nm)
summ$hypermarginals[[which(covs == nm)]]$margpost
summ$hypermarginals[[which(covs == nm)]]$margpost %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["theta"]],y = exp(.data[["thetalogmargpost"]]))) +
ggplot2::theme_classic() +
ggplot2::geom_line() +
ggplot2::labs(title = "",x = "theta",y = "density") +
ggplot2::theme(text = ggplot2::element_text(size = 12))
summ$hypermarginals[[which(covs == nm)]]$margpost %>%
ggplot2::ggplot(ggplot2::aes(x = .data[["theta"]],y = exp(.data[["sigmalogmargpost"]]))) +
ggplot2::theme_classic() +
ggplot2::geom_line() +
ggplot2::labs(title = "",x = "sigma",y = "density") +
ggplot2::theme(text = ggplot2::element_text(size = 12))
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
plot(simcc)
source('~/phd/projects/case-crossover/rpkg/casecrossover/R/06-casecrossover.R')
plot(simcc)
devtools::test()
devtools::check()
devtools::check()
devtools::check()
summary(cc1)
devtools::test()
summary(cc1)
devtools::test()
devtools::test()
devtools::check()
sort(unique(sim1data$exposure_binned))
devtools::check()
simcc
# Specify the control parameters
# See ?cc_control for information.
smoothcontrol <- cc_control(
smooth_prior = list(pc_prior(3,.75)), # PC prior on log-smoothing precision
linear_constraints = create_linear_constraints(u = sim1data$exposure_binned,
whichzero = 0.5,
nm = "exposure_binned"), # Constaint that gamma(0.5) = 0
thetaaccuracy = 50, # Set the accuracy of the theta integration- see ?cc_control
sparsetheta = FALSE, # Use a dense/full grid for integrating theta
thetarange = c(-10,10)) # Integrate theta from -10 to 10
# Fit the model.
# Use s() to specify smooth terms. Match the name of your covariate to the name of the prior in smooth_prior above.
# Include a strata() term to indicate which records belong to the same subject.
simcc <- casecrossover::casecrossover(
case ~ s(exposure_binned) + strata(subject),
data = sim1data,
control = smoothcontrol,
verbose = TRUE
)
# devtools::install_github("awstringer1/casecrossover")
library(casecrossover)
data("sim1data")
head(sim1data)
# Specify the control parameters
# See ?cc_control for information.
smoothcontrol <- cc_control(
smooth_prior = list(pc_prior(3,.75)), # PC prior on log-smoothing precision
linear_constraints = create_linear_constraints(u = sim1data$exposure_binned,
whichzero = 0.5,
nm = "exposure_binned"), # Constaint that gamma(0.5) = 0
thetaaccuracy = 50, # Set the accuracy of the theta integration- see ?cc_control
sparsetheta = FALSE, # Use a dense/full grid for integrating theta
thetarange = c(-10,10)) # Integrate theta from -10 to 10
# Fit the model.
# Use s() to specify smooth terms. Match the name of your covariate to the name of the prior in smooth_prior above.
# Include a strata() term to indicate which records belong to the same subject.
simcc <- casecrossover::casecrossover(
case ~ s(exposure_binned) + strata(subject),
data = sim1data,
control = smoothcontrol,
verbose = TRUE
)
summary(simcc)
plot(simcc)
