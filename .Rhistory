# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# If there are any terms left in the formula, throw a syntax error
terms_left <- ff_variables[!(ff_variables %in% c(response,linear,smooth,strata))]
if (length(terms_left) > 0) {
stop(paste0("The following terms could not be identified as linear or smooth: ",
stringr::str_c(terms_left,collapse=", ")))
}
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a formula for the linear terms
linear_formula <- NULL
if (length(linear) > 0) linear_formula <- formula(stringr::str_c(response,
stringr::str_c(linear,
collapse = "+"),
sep = "~"),env = new.env())
# Return the vector of names of smooth terms for proprietary use.
list(
linear = linear_formula,
smooth = smooth,
strata = strata
)
}
model_elements <- parse_formula(ff)
model_elements
model_elements$strata
length(unique(data[model_elements$strata]))
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Linear terms are terms which appear in both elements and variables
linear <- dplyr::intersect(ff_elements,ff_variables)
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# If there are any terms left in the formula, throw a syntax error
terms_left <- ff_variables[!(ff_variables %in% c(response,linear,smooth,strata))]
if (length(terms_left) > 0) {
stop(paste0("The following terms could not be identified as linear or smooth: ",
stringr::str_c(terms_left,collapse=", ")))
}
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a named list of vectors with the names of each type of term
list(
linear = linear,
smooth = smooth,
strata = strata
)
}
ff <- y ~ x + s(z) + strata(id)
parse_formula(ff)
model_elements <- parse_formula(ff)
model_elements %>% purrr::reduce(c)
# Check that all model elements exist in data
all_model_vars <- model_elements %>% purrr::reduce(c)
ff_elements
ff_variables
ff <- y ~ x + s(z) + strata(id) + a*b + d^2
parse_formula(ff)
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
ff_elements
ff_variables
ff <- y ~ x + s(z) + strata(id) + a*b + I(d^2)
parse_formula(ff)
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
ff_elements
ff_variables
ff <- y ~ x + s(z) + strata(id) + a*b + log(d)
parse_formula(ff)
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
ff_elements
ff_variables
dplyr::intersect(ff_elements,ff_variables)
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
linear <- ff_variables[!(ff_variables %in% c(response,linear,smooth,strata))]
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a named list of vectors with the names of each type of term
list(
linear = linear,
smooth = smooth,
strata = strata
)
}
ff <- y ~ x + s(z) + strata(id) + a*b + log(d)
parse_formula(ff)
ff_variables
linear <- ff_elements[!(ff_variables %in% c(response,linear,smooth,strata))]
linear
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + xx^2 + poly(zz,2)
parse_formula(ff)
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
linear <- ff_elements[!(ff_variables %in% c(response,linear,smooth,strata))]
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a named list of vectors with the names of each type of term
list(
linear = linear,
smooth = smooth,
strata = strata
)
}
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + xx^2 + poly(zz,2)
parse_formula(ff)
ff_variables
ff_elements
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
linear <- ff_elements[!(ff_variables[-1] %in% c(response,linear,smooth,strata))]
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a named list of vectors with the names of each type of term
list(
linear = linear,
smooth = smooth,
strata = strata
)
}
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + xx^2 + poly(zz,2)
parse_formula(ff)
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + I(xx^2) + poly(zz,2)
parse_formula(ff)
ff
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
ff_elements
ff_variables
length(ff_elements)
length(ff_variables)
?update
?update.formula
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
strata
smooth
response
ff
update(f,.~.-z)
update(ff,.~.-z)
update(ff,.~.-s(z))
as.formula(stringr::str_c(".~.-","s(z)"))
update(ff,as.formula(stringr::str_c(".~.-","s(z)")))
update(ff,formula(stringr::str_c(".~.-","s(z)")))
update(ff,formula(stringr::str_c(".~.-","s(z)")))
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Remove it from ff
if (length(strata) > 0) {
for (tm in strata) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
strata
ff
attributes(terms(ff))$term.labels
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + I(xx^2) + poly(zz,2)
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Remove it from ff
if (length(smooth) > 0) {
for (tm in smooth) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Remove it from ff
if (length(strata) > 0) {
for (tm in strata) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
attributes(terms(ff))$term.labels
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Remove it from ff
if (length(smooth) > 0) {
for (tm in smooth) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Remove it from ff
if (length(strata) > 0) {
for (tm in strata) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a named list of vectors with the names of each type of term
list(
linear = attributes(terms(ff))$term.labels,
smooth = smooth,
strata = strata
)
}
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + I(xx^2) + poly(zz,2)
parse_formula(ff)
devtools::test()
devtools::test()
model_elements[[c("smooth","strata")]] %>% purrr::reduce(c)
model_elements
model_elements[c("smooth","strata")]
model_elements[c("smooth","strata")] %>% purrr::reduce(c)
extra_model_vars <- model_elements[c("smooth","strata")] %>% purrr::reduce(c)
if (!all(model_elements %in% colnames(data))) {
missing_vars <- model_elements[!(model_elements %in% colnames(data))]
stop(paste0("The following variables were provided in the model formula but not in the data: ",
stringr::str_c(missing_vars,collapse = ", ")))
}
extra_model_vars <- model_elements[c("smooth","strata")] %>% purrr::reduce(c)
if (!all(extra_model_vars %in% colnames(data))) {
missing_vars <- extra_model_vars[!(extra_model_vars %in% colnames(data))]
stop(paste0("The following variables were provided in the model formula but not in the data: ",
stringr::str_c(missing_vars,collapse = ", ")))
}
?sparse.model.matrix
?filter
ff_variables
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a strata
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
# The strata argument must be provided.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Remove it from ff
if (length(smooth) > 0) {
for (tm in smooth) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match strata terms in same way as smooth
strata <- stringr::str_extract(ff_elements,"^strata\\(\\w+\\)$")
strata <- strata[!is.na(strata)]
# Remove it from ff
if (length(strata) > 0) {
for (tm in strata) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
strata <- stringr::str_remove(strata,"^strata\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
# If there is not exactly one strata term, throw an error
if (length(strata) == 0) stop("No strata variable provided.")
if (length(strata) > 1) {
stop(paste0("You must provide exactly one strata variable. The following strata variables were parsed: ",
stringr::str_c(strata,collapse=", ")))
}
# Return a named list of vectors with the names of each type of term
list(
linear = attributes(terms(ff))$term.labels,
linear_formula = ff,
smooth = smooth,
strata = strata,
response = response
)
}
ff <- y ~ x + s(z) + strata(id) + a*b + log(d) + I(xx^2) + poly(zz,2)
parse_formula(ff)
devtools::test()
model_elements <- parse_formula(ff)
model_elements
devtools::build()
devtools::build()
devtools::document()
packrat::set_opts(external.packages = c("devtools", "ggplot2", "knitr", "usethis", "rmarkdown", "dplyr", "tidyr", "purrr", "stringr", "lubridate", "magrittr"))
packrat::set_opts(external.packages = c("devtools", "ggplot2", "knitr", "usethis", "rmarkdown", "dplyr", "tidyr", "purrr", "stringr", "lubridate", "magrittr"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?formula
devtools::check()
devtools::check()
?match
devtools::check()
devtools::build()
log(.05)
log(1/10)
devtools::check()
devtools::check()
devtools::check()
devtools::build()
library(casecrossover)
?cc_control
cc_control
devtools::document()
?cc_control
library(casecrossover)
?cc_control
casecrossover::cc_control()
?casecrossover::cc_control
?model_setup
devtools::install()
